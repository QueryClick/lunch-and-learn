// The URL of the API we're working with. For example, the backend service.
const url = 'http://localhost:3000';

/**
 * @name iterateResponseAndPrintToBody - Oh boy what a name.
 * @description This a helper function to display API response to our website. It would take too long to type this out during the session.
 * @param {Object[]} apiResponse - The response from the API.
 */
function iterateResponseAndPrintToBody(apiResponse) {
    const blogPost = document.getElementById('blog-posts'); //  <div id="blog-posts"></div> 
    blogPost.innerHTML = ''; // Make sure it's empty.

    // Since our response from the API is an array of objects, we can just iterate through them!
    apiResponse.responseData.forEach((blog) => {
    
        // First, let's create a title with a link for each blog post.
        const h3 = document.createElement('H3');
        let link = document.createElement('A');
        link.text = blog.title;
        link.href = url + '/api/post/' + blog._id;
        h3.appendChild(link);

        // Next, we will create our body content of the blog post within a paragraph.
        const paragraph = document.createElement('P');
        const paragraphContent = document.createTextNode(blog.content);
        paragraph.appendChild(paragraphContent);

        // We then create a delete button, which will call the method `deletePost()`
        let deleteButton = document.createElement('BUTTON');
        const deleteButtonContent = document.createTextNode('Delete This Post');
        deleteButton.setAttribute('onclick', `deletePost('${blog._id}')`);
        deleteButton.appendChild(deleteButtonContent);

        // Finally we append all of this to our blog post section.
        blogPost.append(h3, paragraph, deleteButton);

    });
}

/**
 * @name getPosts
 * @description Get the posts from our API
 */
function getPosts() {

    // Send a GET request to our API, get JSON back.
    return fetch(url + '/api/posts')
        .then((res) => {
            return res.json();
        })
        .then((json) => {
            iterateResponseAndPrintToBody(json); // Pass our JSON data to iterateResponseAndPrintToBody to print data to our body.
        })
        .catch((err) => {
            console.error(err);
        });
}

/**
 * @name createPost
 * @description Use our API to create a post
 */
function createPost() {

    // Get the value from both title and content. Add them to an object.
	const title = document.getElementById('title').value;
	const content = document.getElementById('content').value;
	const data = {
		title,
		content
    };
    
	// Create a new array for an encoded URI with our data to be passed.
	const formattedURI = Object.keys(data).map((key) => {
		return encodeURIComponent(key) + '=' + encodeURIComponent(data[key]);
    }).join('&');
    
    // This will create something like title=This%20is%20an%20encoded%20title&content=This%20is%20encoded%20content

    // We will now send a post request with our body (formattedURI variable) to our API with Content-Type of application/x-www-form-urlencoded;charset=UTF-8
	return fetch(url + '/api/create/post/', {
		method: 'post',
		headers: {
			'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'
		},
		body: formattedURI
	})
		.then((response) => {
            return response.json();
        })
		.then((json) => {
			console.log(json);
			getPosts(); // Get newest posts again.
		})
		.catch((err) => {
			console.error(err);
		});
}

/**
 * @name deletePost
 * @description Use our API to delete a post
 */
function deletePost(id) {

    // Send a delete request to our API with the ID passed along.
    // The id is passed to the deletePost() function from the button on your frontend, generated by iterateResponseAndPrintToBody.
    return fetch(url + '/api/delete/post/' + id, {
        method: 'delete',
		headers: {
			'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'
		}
    })
        .then((res) => {
            return res.json();
        })
        .then((json) => {
            console.log(json);
            getPosts(); // Get newest posts again.
        })
        .catch((err) => {
            console.error(err);
        });
}
